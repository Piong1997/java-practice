class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null) return 0;
        return depth(root);
    }
    public int depth(TreeNode p){
        if(p.left==null&&p.right==null) return 1;
        if(p.left==null) return 1+depth(p.right);
        if(p.right==null) return 1+depth(p.left);
        else return 1+max(depth(p.left),depth(p.right));
    }
    public int max(int a,int b){
        if(a>=b) return a;
        return b;
    }
}
class Solution {
    public int maxDepth(TreeNode root) {
        if (root == null) {
            return 0;
        }
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer(root);
        int ans = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size > 0) {
                TreeNode node = queue.poll();
                if (node.left != null) {
                    queue.offer(node.left);
                }
                if (node.right != null) {
                    queue.offer(node.right);
                }
                size--;
            }
            ans++;
        }
        return ans;
    }
}
