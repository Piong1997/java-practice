//https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        if(preorder.length==0||inorder.length==0) return null;
        TreeNode root=new TreeNode(preorder[0]);
        int i=find(root.val,inorder);
        int rindex=i+1;//注意rindex
        root.left=buildTree(Arrays.copyOfRange(preorder, 1, rindex), Arrays.copyOfRange(inorder, 0, i));
        root.right=buildTree(Arrays.copyOfRange(preorder, rindex, preorder.length), Arrays.copyOfRange(inorder, i+1, inorder.length));
        // }
        return root;
    }
    public int find(int key,int[] inorder){
        for(int i=0;i<inorder.length;i++){if(inorder[i]==key) return i;}
        return -1009;
    }
}
class Solution {
    public HashMap<Integer,Integer> m;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        m=new HashMap();
        for(int i=0;i<inorder.length;i++){
            m.put(inorder[i],i);
        }
        return myBuild(inorder,preorder,0,preorder.length-1,0,inorder.length-1);
    }
    public TreeNode myBuild(int[] inorder, int[] preorder,int preleft,int preright,int inleft,int inright){
        if(preleft>preright||inleft>inright) return null; //注意终止条件
        TreeNode root=new TreeNode(preorder[preleft]);
    
        int preright_n=m.get(preorder[preleft]);//重点！
        int inleft_n=inleft;
        int inright_n=m.get(preorder[preleft]);//重点！！
        int preleft_n=preleft+1;
        root.left=myBuild(inorder,preorder,preleft_n,preright_n,inleft_n,inright_n-1);
        root.right=myBuild(inorder,preorder,preright_n+1,preright,inright_n+1,inright);
        return root;
    }
}
class Solution {
    private Map<Integer, Integer> indexMap;

    public TreeNode myBuildTree(int[] preorder, int[] inorder, int preorder_left, int preorder_right, int inorder_left, int inorder_right) {
        if (preorder_left > preorder_right) {
            return null;
        }

        // 前序遍历中的第一个节点就是根节点
        int preorder_root = preorder_left;
        // 在中序遍历中定位根节点
        int inorder_root = indexMap.get(preorder[preorder_root]);
        
        // 先把根节点建立出来
        TreeNode root = new TreeNode(preorder[preorder_root]);
        // 得到左子树中的节点数目
        int size_left_subtree = inorder_root - inorder_left;
        // 递归地构造左子树，并连接到根节点
        // 先序遍历中「从 左边界+1 开始的 size_left_subtree」个元素就对应了中序遍历中「从 左边界 开始到 根节点定位-1」的元素
        root.left = myBuildTree(preorder, inorder, preorder_left + 1, preorder_left + size_left_subtree, inorder_left, inorder_root - 1);
        // 递归地构造右子树，并连接到根节点
        // 先序遍历中「从 左边界+1+左子树节点数目 开始到 右边界」的元素就对应了中序遍历中「从 根节点定位+1 到 右边界」的元素
        root.right = myBuildTree(preorder, inorder, preorder_left + size_left_subtree + 1, preorder_right, inorder_root + 1, inorder_right);
        return root;
    }

    public TreeNode buildTree(int[] preorder, int[] inorder) {
        int n = preorder.length;
        // 构造哈希映射，帮助我们快速定位根节点
        indexMap = new HashMap<Integer, Integer>();
        for (int i = 0; i < n; i++) {
            indexMap.put(inorder[i], i);
        }
        return myBuildTree(preorder, inorder, 0, n - 1, 0, n - 1);
    }
}
