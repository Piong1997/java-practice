class Solution {
    public int lengthOfLongestSubstring(String s) {
        // 记录字符上一次出现的位置
        int[] last = new int[128];
        for(int i = 0; i < 128; i++) {
            last[i] = -1;
        }
        int n = s.length();

        int res = 0;
        int start = 0; // 窗口开始位置
        for(int i = 0; i < n; i++) {
            int index = s.charAt(i);
            start = Math.max(start, last[index] + 1);
            res   = Math.max(res, i - start + 1);
            last[index] = i;
        }

        return res;
    }
}
//只是用end指针，记录重复字符上一次出现的位置
class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        int max = 0, start = 0;
        for (int end = 0; end < s.length(); end++) {
            char ch = s.charAt(end);
            if (map.containsKey(ch)){
                start = Math.max(map.get(ch)+1,start);
            }
            max = Math.max(max,end - start + 1);
            map.put(ch,end);
        }
        return max;
    }
}

//允许重复一次：用左右双指针，先移动右边再移动左边
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int left = 0;
        char[] chars = new char[26];
        int ans = 0;
        for (int right = 0; right < s.length(); right++) {
            chars[s.charAt(right) - 'a']++;
            while (chars[s.charAt(right) - 'a'] > 2) {
                chars[s.charAt(left) - 'a']--;
                left++;
            }
            ans = Math.max(ans, right - left + 1);
        }
        return ans;
    }
}
//至少重复K次，转395
#递归
class Solution {
    public int longestSubstring(String s, int k) {
        if(s.length()<k) //如果子串长度已经小于k，返回0
            return 0;
        HashMap<Character,Integer> map = new HashMap<>();
        for(int i=0;i<s.length();i++){
            map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);
        }
        int res = 0;
        for(char c : map.keySet()){
            if(map.get(c)<k){//如果某个字符数量小于k，那么就不能包含它，按其进行分割
                for(String tmp : s.split(c+"")){
                    res = Math.max(res,longestSubstring(tmp,k));//对每个子串，递归地进行分割
                }
                return res;//返回分割后的最大值
            }
        }
        return s.length();//如果每个字符都大于k个了，说明当前子串符合条件，直接返回长度
    }
}
