class Solution {
    public int[] sortArray(int[] nums) {
        QuickSort(nums,0,nums.length-1);
        return nums;
    }

    public void QuickSort (int[] a, int p, int r)
    {
        if (p<r) {
            int x = new Random().nextInt(r - p + 1) + p; //getCutNumber(a,p,r);   //随机算法性能好过三者取中
            int q=partition_t(a,p,r,x);
            QuickSort (a,p,q-1); //对左半段排序
            QuickSort (a,q+1,r); //对右半段排序
            }
    }

    public int partition_t(int[] a, int p, int r,int x) {
        int i = p,j=r;
        int temp = a[x];
        swap(a,p,x);
        while (i < j){
            while (a[j] >= temp && i < j)
                j -= 1;
            a[i] = a[j];
            while (a[i] <= temp && i < j)
                i += 1;
            a[j] = a[i];
        }
        a[j] = temp;
        return j;
    }
    public int getCutNumber(int[] a,int p,int r){
        int m = (p + r) / 2;
        if (a[p] > a[r]){
            if (a[p] < a[m])
                return p;
            else if (a[r] > a[m])
                return r;
            else
                return m;
        }
        else if (a[p] > a[m])
            return p;
        else if (a[r] > a[m])
            return m;
        else
            return r;
    }
     public void swap(int[] a, int i, int j){
        int tmp = a[j];
        a[j]=a[i];
        a[i]=tmp;
    }
}
//堆排序，大根堆
class Solution {
    int[] a;
    int heapSize=0;
    public int[] sortArray(int[] nums) {
        a = Arrays.copyOf(nums,nums.length); //copy数组
        heapSize = nums.length;
        for(int i=(heapSize-2)/2;i>=0;i--){ //最后一个非叶子节点是(heapSize-2)/2
            buildDown(i);
        }
        sort(nums);
        return nums;
    }
    public void buildDown(int k){ //向下建立堆结构
        if(heapSize==1||k>(heapSize-2)/2) //k超过最后一个叶子结点，停止
            return;
        int left = k*2+1, right = k*2+2, largest = left; //左右孩子对应k*2+1， k*2+2
        if(right<heapSize && a[right]>a[left]) //注意right可能越界1个元素
            largest = right;
        if(a[k]<a[largest]){
            swap(k,largest);
            buildDown(largest);
        }
    }
    public void poll(){ //pop堆顶，然后向下重建堆结构
        swap(0,heapSize-1);//将堆顶元素交换到最后
        heapSize--;//使堆顶元素失效
        buildDown(0);//重新向下建立
    }

    // 排序只需要一直删除堆顶元素， 放到堆末尾;
    public void sort(int[] nums){
          for(int i = 0; i < a.length; i++){
              nums[a.length-1-i] = a[0]; //a[0]是当前最大元素
              poll(); //元素从大到小poll被poll出来
          }
     }
    public void swap(int i, int j){
        int tmp = a[j];
        a[j]=a[i];
        a[i]=tmp;
    }
}
