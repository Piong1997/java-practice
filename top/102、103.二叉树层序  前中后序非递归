//102
class Solution {
   public List<List<Integer>> levelOrder(TreeNode root) {
    if(root == null)
        return new ArrayList<>();
    List<List<Integer>> res = new ArrayList<>();
    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    queue.add(root);
    while(!queue.isEmpty()){
        int count = queue.size(); //设置count记录当前层节点数量
        List<Integer> list = new ArrayList<Integer>();
        while(count > 0){ //二层循环，遍历完当前层节点
            TreeNode node = queue.poll();
            list.add(node.val);
            if(node.left != null)
                queue.add(node.left);
            if(node.right != null)
                queue.add(node.right);
            count--;
        }
        res.add(list);
    }
    return res;
   }
}
//103
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> tmpRes = new ArrayList<>();
        Queue<TreeNode> dq = new LinkedList<>();
        int layer = 1;
        if(root == null) return res;
        dq.offer(root);
        while(!dq.isEmpty()){
            int count = dq.size();
            while(count>0){
                TreeNode t = dq.poll();
                tmpRes.add(t.val);
                if(t.left!=null) dq.offer(t.left);
                if(t.right!=null) dq.offer(t.right);
                count--;
            }
            if((layer&1)==1)
                res.add(new ArrayList(tmpRes));
            else{
                Collections.reverse(tmpRes);
                res.add(new ArrayList(tmpRes));
            }
            tmpRes.clear();
            layer++;
        }
        return res;
    }
}

//前序非递归
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList();
        Stack<TreeNode> s=new Stack<TreeNode>();
        TreeNode p=root;
        while(p!=null||!s.empty()){
            while(p!=null){
                s.push(p);
                res.add(p.val);
                p=p.left;
            }
            if(!s.empty()){
                p=s.pop();
                p=p.right;
            }
        }
    return res;
    }
}
//中序非递归
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList();
        Stack<TreeNode> s=new Stack();
        TreeNode p=root;
        while(p!=null || !s.empty()){
            while(p!=null){
                s.push(p);
                p=p.left;
            }
            if(!s.empty()){
                p=s.pop();
                res.add(p.val);
                p=p.right;
            }
        }
        return res;
    }
}
//后序非递归
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> s=new Stack<TreeNode>();
        List<Integer> res=new ArrayList<>();
        TreeNode p=root,pre=null;
        while(p!=null || !s.empty()){
            while(p!=null){
                s.push(p);
                p=p.left;
                pre=null;
            }
            if(!s.empty()){
                if(s.peek().right==pre || s.peek().right==null){//判断上一个节点是否为右子树或右子树为空
                    p=s.pop();
                    res.add(p.val);
                    pre=p;
                    p=null;
                }
                else{
                    p=s.peek();
                    p=p.right;
                }
            }
        }
        return res;    
    }
}
//后序可以通过前序 再reverse来实现
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> res=new ArrayList();
        Stack<TreeNode> s=new Stack<TreeNode>();
        TreeNode p=root;
        while(p!=null||!s.empty()){
            while(p!=null){
                s.push(p);
                res.add(p.val);
                p=p.right;
            }
            if(!s.empty()){
                p=s.pop();
                p=p.left;
            }
        }
        Collections.reverse(res);
        return res;
    }
}
