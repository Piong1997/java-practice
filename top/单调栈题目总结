//496. 下一个更大元素 I
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        int[] res = new int[n1];
        Map<Integer,Integer> m = new HashMap();
        Deque<Integer> stack = new LinkedList();

        for(int i=n2-1;i>=0;i--){
            while(!stack.isEmpty() && stack.peek()<=nums2[i])
                    stack.pop();
            if(stack.isEmpty())
                m.put(nums2[i],-1);
            else
                m.put(nums2[i],stack.peek());
            stack.push(nums2[i]);
        }
        for(int i=0;i<n1;i++){
            res[i] = m.get(nums1[i]);
        }
        return res;
    }
}
//503. 下一个更大元素 II
#显示拉长数组
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int len = nums.length;
        int[] newArr = Arrays.copyOf(nums,len*2-1);;
        int[] res = new int[len*2];
        for(int i=0;i<len-1;i++){
            newArr[i+len] = nums[i];
        } 
        Deque<Integer> stack = new LinkedList();
        for(int i=newArr.length-1;i>=0;i--){
            while(!stack.isEmpty() && stack.peek()<=newArr[i])
                    stack.pop();
            if(stack.isEmpty())
                res[i] = -1;
            else
                res[i] = stack.peek();
            stack.push(newArr[i]);
        }
        return Arrays.copyOfRange(res,0,len);
    }
}
