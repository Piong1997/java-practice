//496. 下一个更大元素 I
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int n1 = nums1.length, n2 = nums2.length;
        int[] res = new int[n1];
        Map<Integer,Integer> m = new HashMap();
        Deque<Integer> stack = new LinkedList();

        for(int i=n2-1;i>=0;i--){
            while(!stack.isEmpty() && stack.peek()<=nums2[i])
                    stack.pop();
            if(stack.isEmpty())
                m.put(nums2[i],-1);
            else
                m.put(nums2[i],stack.peek());
            stack.push(nums2[i]);
        }
        for(int i=0;i<n1;i++){
            res[i] = m.get(nums1[i]);
        }
        return res;
    }
}
//503. 下一个更大元素 II
#显示地拉长数组
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int len = nums.length;
        int[] newArr = Arrays.copyOf(nums,len*2-1);;
        int[] res = new int[len*2];
        for(int i=0;i<len-1;i++){
            newArr[i+len] = nums[i];
        } 
        Deque<Integer> stack = new LinkedList();
        for(int i=newArr.length-1;i>=0;i--){
            while(!stack.isEmpty() && stack.peek()<=newArr[i])
                    stack.pop();
            if(stack.isEmpty())
                res[i] = -1;
            else
                res[i] = stack.peek();
            stack.push(newArr[i]);
        }
        return Arrays.copyOfRange(res,0,len);
    }
}
#取余，不用显示
class Solution {
    public int[] nextGreaterElements(int[] nums) {
        int n = nums.length;
        int[] ret = new int[n];
        Arrays.fill(ret, -1);
        Deque<Integer> stack = new LinkedList<Integer>();
        for (int i = 0; i < n * 2 - 1; i++) {
            while (!stack.isEmpty() && nums[stack.peek()] < nums[i % n]) {
                ret[stack.pop()] = nums[i % n];
            }
            stack.push(i % n);
        }
        return ret;
    }
}
//456. 132 模式
class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;
        if (n < 3) {
            return false;
        }

        // 左侧最小值
        int leftMin = nums[0];
        // 右侧所有元素
        TreeMap<Integer, Integer> rightAll = new TreeMap<Integer, Integer>();

        for (int k = 2; k < n; ++k) {
            rightAll.put(nums[k], rightAll.getOrDefault(nums[k], 0) + 1);
        }

        for (int j = 1; j < n - 1; ++j) { //遍历最大的元素，即132的3
            if (leftMin < nums[j]) { //比左边最小值大
                Integer next = rightAll.ceilingKey(leftMin + 1);//找右边最小值=大于leftMin的最小值
                if (next != null && next < nums[j]) { //比右边最小值大，成功找到
                    return true;
                }
            }
            leftMin = Math.min(leftMin, nums[j]);//可能比左边最小值小，更新最小值
            rightAll.put(nums[j + 1], rightAll.get(nums[j + 1]) - 1);//下次循环以j+1为中心，从右侧元素移除它。
            if (rightAll.get(nums[j + 1]) == 0) {
                rightAll.remove(nums[j + 1]);
            }
        }
        return false;
    }
}
class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;
        Deque<Integer> stack = new LinkedList<>();
        int k = Integer.MIN_VALUE;
        for (int i = n - 1; i >= 0; i--) {//从后往前
            if (nums[i] < k) return true;//stack里记录的是3的可选值
            while (!stack.isEmpty() && stack.peek() < nums[i]) {
                //k记录pop出的最大值，k即为132中3右边的最大值，即2的最大值
                k = Math.max(k, stack.pop()); 
            }
            stack.push(nums[i]);
        }
        return false;
    }
}

