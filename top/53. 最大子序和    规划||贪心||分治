//改进 不需要保存所有中间结果，只需要上一步
class Solution {
    public int maxSubArray(int[] nums) {
        int tmp = nums[0];
        int max = nums[0];
        for(int i=1;i<nums.length;i++){
            tmp = subCount(tmp,nums,i);
            if(tmp>max) max=tmp; 
        }
        return max;
    }
    public int subCount(int pre,int[] nums,int i){
        return Math.max(pre+nums[i],nums[i]);
    }
}
//贪心
class Solution {
    public int maxSubArray(int[] nums) {
        int sum = 0;//sum存储当前子段和
        int max = -100000;//max存储历史最大子段和
        for(int i=0;i<nums.length;i++){
            sum = sum+nums[i];
            if(sum>max) max = sum;
            if(sum<0) //抛弃置0，从下一个开始寻找（只要sum<0，对后续肯定是负影响，直接抛弃）
                sum=0;         
        }
        return max;
    }
}
//贪心+求出子串位置
    public ArrayList<Integer> maxSubArray(int[] nums) {
        ArrayList<Integer> arr = new ArrayList<Integer>();
        int sum = 0;//sum存储当前子段和
        int max = -100000;//max存储历史最大子段和
        int from=0,to=0;
        Map<Integer,Integer> m = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            sum = sum+nums[i];
            if(sum>max) {
                max = sum;
                to = i;
                m.clear();
                m.put(from,to);
            }
            if(sum<0){ //抛弃置0，从下一个开始寻找
                sum=0;
                from = i+1;
            }
        }
        int key = m.keySet().iterator().next();
        arr.add(max);
        arr.add(key);
        arr.add(m.get(key));
        return arr;
    }

