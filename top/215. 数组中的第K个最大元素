class Solution {
   public int findKthLargest(int[] nums, int k) {

        return select(nums,0,nums.length-1,k);
    }
    public int select(int[] a, int p, int r, int k){
        if (r-p<5) {
            Arrays.sort(a,p,r+1);//sort 排序从p排序到r而并不是r+1
            return a[r-k+1];
        };
        for(int i=0;i<=(r-p-4)/5;i++){
            Arrays.sort(a,p+i*5,p+i*5+4);
            int med=p+i*5+2;
            swap(a,p+i,med); //各组中位数交换到数组前面的位置
        }
        int x = select(a, p, p+(r-p-4)/5, (r-p+1)/10);
        int i=partition(a,p,r, x);
        int j=r-i+1;  //划分元+划分元右边元素个数
        if (k<=j) return select(a,i,r,k);//在右边，k不变
        else return select(a,p,i-1,k-j);//在右边，k变为k-j
    }
    public int partition_t(int[] a, int p, int r,int x) {
        int i = p,j=r;
        int pos=0;
        for(int q=p; q<=r; q++)
        {
            if(a[q]==x)
            {
                pos=q;
                break;
            }
        }
        swap(a,p,pos);
        while (i < j){
            while (a[j] >= x && i < j)
                j -= 1;
            a[i] = a[j];
            while (a[i] <= x && i < j)
                i += 1;
            a[j] = a[i];
        }
        a[j] = x;
        return j;
    }
   public int partition(int[] a,int p,int r,int val)
    {
        int pos=0;
        for(int q=p; q<=r; q++)
        {
            if(a[q]==val)
            {
                pos=q;
                break;
            }
        }
        swap(a,p,pos);

        int i=p,j=r+1,x=a[p];
        while(true)
        {
            while(a[++i]<x&&i<r);
            while(a[--j]>x);
            if(i>=j)break;
            swap(a,i,j);
        }
        a[p]=a[j];
        a[j]=x;
        return j;
    }
    public void swap(int[] a, int i, int j){
        int tmp = a[j];
        a[j]=a[i];
        a[i]=tmp;
    }
    
}
