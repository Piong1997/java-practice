class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1 = nums1.length, len2 = nums2.length;
        int count = 0, i=0, j=0, res=0;
        while(i<len1||j<len2){
            boolean flag=false;
            int num1 = i<len1?nums1[i]:Integer.MAX_VALUE;
            int num2 = j<len2?nums2[j]:Integer.MAX_VALUE;
            if(num1<num2)
                i++;
            else{
                j++;
                flag=true;
            }
            count++;
            if((len1+len2)%2==1&&count==(len1+len2+1)/2)
                return flag?nums2[j-1]:nums1[i-1];
            else if((len1+len2)%2==0&&(count==(len1+len2)/2||count==(len1+len2)/2+1)){
                res += flag?nums2[j-1]:nums1[i-1];
            }
        }
        return (double)res/2;
    }
}
//二分法，转化为求两个数组中第k大的元素
//https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/
 public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    int n = nums1.length;
    int m = nums2.length;
    int left = (n + m + 1) / 2;
    int right = (n + m + 2) / 2;
    //将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。
    return (getKth(nums1, 0, n - 1, nums2, 0, m - 1, left) + getKth(nums1, 0, n - 1, nums2, 0, m - 1, right)) * 0.5;  
}
    
    private int getKth(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2, int k) {
        int len1 = end1 - start1 + 1;
        int len2 = end2 - start2 + 1;
        //让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 
        if (len1 > len2) return getKth(nums2, start2, end2, nums1, start1, end1, k);
        if (len1 == 0) return nums2[start2 + k - 1];

        if (k == 1) return Math.min(nums1[start1], nums2[start2]);

        int i = start1 + Math.min(len1, k / 2) - 1; //出现数组长度小于K，取数组长度
        int j = start2 + Math.min(len2, k / 2) - 1;

        if (nums1[i] > nums2[j]) {//去掉nums2中的前k/2个（或者全部数组）元素
            return getKth(nums1, start1, end1, nums2, j + 1, end2, k - (j - start2 + 1));
        }
        else {
            return getKth(nums1, i + 1, end1, nums2, start2, end2, k - (i - start1 + 1));
        }
    }
