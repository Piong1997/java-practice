/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left==right) return head;
        ListNode headPre = new ListNode();
        headPre.next = head;
        ListNode p = headPre;
        int index = 0;
        while(index<left-1){//让p指向开始位置的前一个
            p=p.next;
            index++;
        }
        ListNode pre = p, tail=pre.next, next;//pre记录开始位置的前一个，tail记录反转的最后位置
        //p向后指向开始节点
        p=p.next;
        next=p.next;
        index++;

        for(;index<right;index++){
            ListNode tmp = next.next;
            next.next=p;
            p=next;
            next=tmp;
        }
        pre.next=p;tail.next=next;//pre指向反转后的头，tail指向后续的链表元素
        return headPre.next;
    }
    //新方法
     public ListNode reverseBetween(ListNode head, int left, int right) {
        ListNode head_pre=new ListNode();
        head_pre.next = head;
        if(left==right) return head;
        ListNode pre = head_pre,end_next = pre;
        ListNode start = pre.next,end=start;
        for(int i=1;i<=right;i++){
            if(i==left-1)
                pre=end;
            else if(i==left)
                start=end;
            else if(i==right){
                reverseBetweenNode(start,end);
                //pre指向反转后的头结点，也就是原来的end
                pre.next=end;
                //反转后的尾节点，也就是原来的start，指向后继节点
                start.next=end_next;
                return head_pre.next;
            }
            end=end.next;
            end_next=end.next;
        }
        return head_pre.next;
    }

    public void reverseBetweenNode(ListNode left, ListNode right) {
        if(left==right) return;
        ListNode p = left,next=p.next;
        while(p!=right){
            ListNode tmp=next.next;
            next.next=p;
            p=next;
            next=tmp;
        }
        return;
    }
}
//头插法
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        // 设置 dummyNode 是这一类问题的一般做法
        ListNode dummyNode = new ListNode(-1);
        dummyNode.next = head;
        ListNode pre = dummyNode;
        for (int i = 0; i < left - 1; i++) {
            pre = pre.next;
        }
        ListNode cur = pre.next;
        ListNode next;
        for (int i = 0; i < right - left; i++) {
            next = cur.next;
            cur.next = next.next;
            next.next = pre.next;
            pre.next = next;
        }
        return dummyNode.next;
    }
}
#25 k个一组翻转
//最新版
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode head_pre = new ListNode();
        head_pre.next = head;
        ListNode start_pre = head_pre;
        int i=0;
        for(ListNode p=head_pre;p!=null;){
            if(i!=0 && i%k==0){
                ListNode end_after = p.next;
                reverseBetween(start_pre.next,p);
                ListNode end=start_pre.next; //反转后的end
                start_pre.next=p;//反转位置的前一个节点连接到反转后的头，也就是p
                end.next = end_after;//反转后的end连接到end_after
                p = end;//由于发生了反转，需要更新p为end
                start_pre = p;//更新start_pre为反转的尾
            }
            i++;
            p=p.next;
        }
        return head_pre.next;
    }
    public void reverseBetween(ListNode start, ListNode end){
        ListNode p=start,next=p.next;
        while(p!=end){
            ListNode tmp=next.next;
            next.next=p;
            p=next;
            next=tmp;
        }
        return ;
    }
}

//直接调用上面的函数
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int length = 0;
        ListNode t=head;
        for(ListNode p=head;p!=null;p=p.next){
            length++;
        }
        for(int i=1;k*i<=length;i++){
            t = reverseBetween(t,(i-1)*k+1,i*k);
        }
        return t;

    }
     public ListNode reverseBetween(ListNode head, int left, int right) {
        // 设置 dummyNode 是这一类问题的一般做法
        ListNode dummyNode = new ListNode(-1);
        dummyNode.next = head;
        ListNode pre = dummyNode;
        for (int i = 0; i < left - 1; i++) {
            pre = pre.next;
        }
        ListNode cur = pre.next;
        ListNode next;
        for (int i = 0; i < right - left; i++) {
            next = cur.next;
            cur.next = next.next;
            next.next = pre.next;
            pre.next = next;
        }
        return dummyNode.next;
    }
    
    //新方法
    public ListNode reverseKGroup(ListNode head, int k) {
        if(k==1) return head;
        ListNode head_pre=new ListNode();
        head_pre.next = head;
        ListNode pre = head_pre,end_next = pre;
        ListNode start = pre.next,end=start;
        for(int i=1;end!=null;i++){    
            if(i%k==0){
                reverseBetween(start,end);
                //pre指向反转后的头结点，也就是原来的end
                pre.next=end;
                //反转后的尾节点，也就是原来的start，指向后继节点
                start.next=end_next;
                //pre更新为start，start后移一位
                pre = start;
                start=start.next;
                //更新end，注意到最后一个元素时不能更新end_next
                end=start;
                if(end!=null)
                    end_next=end.next;
            }
            //更新end，注意到最后一个元素时不能更新end_next
            else{
                end=end.next;
                if(end!=null)
                    end_next=end.next;
            }
            
        }
        return head_pre.next;
    }
   public void reverseBetween(ListNode left, ListNode right) {
        if(left==right) return;
        ListNode p = left,next=p.next;
        while(p!=right){
            ListNode tmp=next.next;
            next.next=p;
            p=next;
            next=tmp;
        }
        return;
    }
}

