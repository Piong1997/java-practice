/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(left==right) return head;
        ListNode headPre = new ListNode();
        headPre.next = head;
        ListNode p = headPre;
        int index = 0;
        while(index<left-1){//让p指向开始位置的前一个
            p=p.next;
            index++;
        }
        ListNode pre = p, tail=pre.next, next;//pre记录开始位置的前一个，tail记录反转的最后位置
        //p向后指向开始节点
        p=p.next;
        next=p.next;
        index++;

        for(;index<right;index++){
            ListNode tmp = next.next;
            next.next=p;
            p=next;
            next=tmp;
        }
        pre.next=p;tail.next=next;//pre指向反转后的头，tail指向后续的链表元素
        return headPre.next;
    }
}
//头插法
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        // 设置 dummyNode 是这一类问题的一般做法
        ListNode dummyNode = new ListNode(-1);
        dummyNode.next = head;
        ListNode pre = dummyNode;
        for (int i = 0; i < left - 1; i++) {
            pre = pre.next;
        }
        ListNode cur = pre.next;
        ListNode next;
        for (int i = 0; i < right - left; i++) {
            next = cur.next;
            cur.next = next.next;
            next.next = pre.next;
            pre.next = next;
        }
        return dummyNode.next;
    }
}
#25 k个一组翻转
//直接调用上面的函数
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        int length = 0;
        ListNode t=head;
        for(ListNode p=head;p!=null;p=p.next){
            length++;
        }
        for(int i=1;k*i<=length;i++){
            t = reverseBetween(t,(i-1)*k+1,i*k);
        }
        return t;

    }
     public ListNode reverseBetween(ListNode head, int left, int right) {
        // 设置 dummyNode 是这一类问题的一般做法
        ListNode dummyNode = new ListNode(-1);
        dummyNode.next = head;
        ListNode pre = dummyNode;
        for (int i = 0; i < left - 1; i++) {
            pre = pre.next;
        }
        ListNode cur = pre.next;
        ListNode next;
        for (int i = 0; i < right - left; i++) {
            next = cur.next;
            cur.next = next.next;
            next.next = pre.next;
            pre.next = next;
        }
        return dummyNode.next;
    }
}
