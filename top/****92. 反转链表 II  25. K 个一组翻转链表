#206.反转链表
class Solution {
    public ListNode reverseList(ListNode head) {
        if(head==null) return head;
        ListNode p=head,next=p.next;
        while(next!=null){
            ListNode tmp = next.next;
            next.next=p;
            p=next;
            next=tmp;
        }
        head.next=null;//head（现在为尾）的next置空
        return p;//返回现在的头
    }
}
#反转指定区间链表
class Solution {
   public ListNode reverseBetween(ListNode head, int left, int right) {
            ListNode head_pre = new ListNode();
            head_pre.next = head;
            ListNode start_pre = head_pre;
            int i=0;
            for(ListNode p=head_pre;p!=null;){
                if(i==left-1)
                    start_pre = p;
                else if(i==right){
                    ListNode end_after = p.next;//反转后end应该连接的下一个节点
                    reverseBetweenNode(start_pre.next,p);
                    ListNode end = start_pre.next;//反转后的end
                    start_pre.next = p;//反转位置的前一个节点连接到反转后的头，也就是p
                    end.next = end_after;//反转后的end连接到end_after
                    break;
                }
                i++;
                p=p.next;
            }
            return head_pre.next;
    }
    public void reverseBetweenNode(ListNode start, ListNode end){
        ListNode p=start,next=p.next;
        while(p!=end){
            ListNode tmp=next.next;
            next.next=p;
            p=next;
            next=tmp;
        }
        return ;
    }
}
//头插法
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        // 设置 dummyNode 是这一类问题的一般做法
        ListNode dummyNode = new ListNode(-1);
        dummyNode.next = head;
        ListNode pre = dummyNode;
        for (int i = 0; i < left - 1; i++) {
            pre = pre.next;
        }
        ListNode cur = pre.next;
        ListNode next;
        for (int i = 0; i < right - left; i++) {
            next = cur.next;
            cur.next = next.next;
            next.next = pre.next;
            pre.next = next;
        }
        return dummyNode.next;
    }
}
#25 k个一组翻转
//最新版
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode head_pre = new ListNode();
        head_pre.next = head;
        ListNode start_pre = head_pre;
        int i=0;
        for(ListNode p=head_pre;p!=null;){
            if(i!=0 && i%k==0){
                ListNode end_after = p.next;//反转后end应该连接的下一个节点
                reverseBetween(start_pre.next,p);
                ListNode end=start_pre.next; //反转后的end
                start_pre.next=p;//反转位置的前一个节点连接到反转后的头，也就是p
                end.next = end_after;//反转后的end连接到end_after
                p = end;//由于发生了反转，需要更新p为end
                start_pre = p;//更新start_pre为反转的尾
            }
            i++;
            p=p.next;
        }
        return head_pre.next;
    }
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode head_pre = new ListNode(), p=head_pre, start=head, start_pre=head_pre;
        head_pre.next = head;
        for(int i=0;p!=null;i++){
            if(i%k==0 && i!=0){//i=0特殊处理
                ListNode end_next = p.next; //先记录反转后的尾需要连接的下一个节点
                reverseBetween(start,p); //反转
                start_pre.next = p; //前一个节点连接到反转后的头p
                start.next = end_next; //反转后的尾start 连接到下一个节点
                start_pre = start;//更新前一个节点为start
                p = end_next;//更新p为下一个节点
                start = p;//更新start为p
            }
            else{
                p = p.next;
            }
        }
        return head_pre.next;
    }
    public void reverseBetween(ListNode start, ListNode end){
        ListNode p=start,next=p.next;
        while(p!=end){
            ListNode tmp=next.next;
            next.next=p;
            p=next;
            next=tmp;
        }
        return ;
    }
}

}

