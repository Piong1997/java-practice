#使用上下界判断是否越界
class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST0(root,Long.MIN_VALUE,Long.MAX_VALUE);
    }
    public boolean isValidBST0(TreeNode root, long lower, long upper) {
        if(root==null) return true;
        if(root.val<=lower || root.val>=upper)
            return false;
        return isValidBST0(root.left, lower, root.val) && isValidBST0(root.right,root.val,upper);
    }
}

#中序遍历1
class Solution {
    List<Integer> res = new ArrayList<>();
    public boolean isValidBST(TreeNode root) {
        if(root==null)
            return true;
        inOrder(root);
        for(int i=1;i<res.size();i++){
            if(res.get(i)<=res.get(i-1)){
                return false;
            }
        }
        return true;
    }

    private void inOrder(TreeNode root){
        if(root!=null){
            inOrder(root.left);
            res.add(root.val);
            inOrder(root.right);
        }
    }
}
#中序遍历2
class Solution {
    long pre = Long.MIN_VALUE;
    public boolean isValidBST(TreeNode root) {
        if (root == null) {
            return true;
        }
        // 访问左子树
        if (!isValidBST(root.left)) {
            return false;
        }
        // 访问当前节点：如果当前节点小于等于中序遍历的前一个节点，说明不满足BST，返回 false；否则继续遍历。
        if (root.val <= pre) {
            return false;
        }
        pre = root.val;
        // 访问右子树
        return isValidBST(root.right);
    }
}
