class LRUCache {

    int cap;
    LinkedHashMap<Integer,Integer> map;
    public LRUCache(int capacity) {
        this.cap=capacity;
        this.map= new LinkedHashMap(cap*2);
    }
    
    public int get(int key) {
        if(map.containsKey(key)){
            int v = map.get(key);
            map.remove(key);
            map.put(key,v);
            return v;
        }
        else return -1;    
        
    }
    
    public void put(int key, int value) {
        
        if(map.containsKey(key)){
            int v = map.get(key);
            map.remove(key);
            map.put(key,value);
        }
        else if (map.size() == cap){
            int i = map.entrySet().iterator().next().getKey();
            this.map.remove(i);
            this.map.put(key,value);
        }
        else if(map.size()<this.cap)
            this.map.put(key,value);
    }
    
}

//使用双向链表+map，链表用于保持顺序
class LRUCache {
    int size;
    int cap;
    class LRUNode{
        int key;
        int value;
        LRUNode pre;
        LRUNode next;
        public LRUNode(){}
        public LRUNode(int key,int value){
            this.key=key;
            this.value=value;
        }
    }
    LRUNode head,tail;
    Map<Integer,LRUNode> cache;
    public LRUCache(int capacity) {
      this.cap = capacity;
      this.cache  = new HashMap<>();
      this.head = new LRUNode();
      this.tail = new LRUNode();
      head.next = tail;
      tail.pre = head;
    }
    
    public int get(int key) {
        LRUNode node;
        if(cache.containsKey(key)){
            node = cache.get(key);
            moveTohead(node);
            return node.value;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        LRUNode node;
        if(cap==0) return;  //避免为0时put
        if(cache.containsKey(key)){
            node = cache.get(key);
            moveTohead(node);
            node.value = value;
        }
        else if(size==cap){
            node = new LRUNode(key,value);
            LRUNode rm = tail.pre;
            tail.pre.pre.next = tail;
            tail.pre = tail.pre.pre;
            addTohead(node); 
            cache.put(key,node);
            cache.remove(rm.key);
        }
        else{
            node = new LRUNode(key,value);
            addTohead(node);
            size++;
            cache.put(key,node);
        }
    }

    public void moveTohead(LRUNode node){
        node.pre.next = node.next;
        node.next.pre = node.pre;
        addTohead(node);
    }
    public void addTohead(LRUNode node){
        node.next = head.next;
        node.next.pre = node;
        head.next = node;
        node.pre = head;
    }
}


/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
