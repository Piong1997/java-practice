//mysolution
class Solution {
    public boolean isSubsequence(String s, String t) {
        int j=0;
        int flag=0;
        if(s.length()>t.length()) return false;
        for(int i=0;i<s.length();i++){
            if(flag==1) break;
            char aim = s.charAt(i);
            while(j<t.length()){
                if(t.charAt(j)==aim) {
                    j++;
                    if(j==t.length()&&i!=s.length()-1) flag=1;
                    break;
                }
                j++;
                if(j==t.length()) flag=1;
            }
        }
        return flag==0?true:false;
    }
}
//双指针 
class Solution {
    public boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;
        while (i < n && j < m) {
            if (s.charAt(i) == t.charAt(j)) {
                i++;
            }
            j++;
        }
        return i == n;
    }
}
//dp 存储匹配目的串的位置信息，可快速用大量的字符串来匹配目的串O(m)
//令 f[i][j] 表示字符串 t 中从位置 i 开始往后字符 j 第一次出现的位置。
在进行状态转移时，如果 t中位置 i 的字符就是 j，那么 f[i][j]=i，否则 j 出现在位置 i+1 开始往后，即 f[i][j]=f[i+1][j]
class Solution {
    public boolean isSubsequence(String s, String t) {
        int n = s.length(), m = t.length();

        int[][] f = new int[m + 1][26];//最后一个位置冗余方便代码
        for (int i = 0; i < 26; i++) {
            f[m][i] = m;// =m代表后续没有匹配
        }

        for (int i = m - 1; i >= 0; i--) { //从后向前
            for (int j = 0; j < 26; j++) { //目的串每个位置存放26个字母下一个出现的位置
                if (t.charAt(i) == j + 'a')
                    f[i][j] = i;
                else
                    f[i][j] = f[i + 1][j];
            }
        }
        int add = 0;
        for (int i = 0; i < n; i++) {
            if (f[add][s.charAt(i) - 'a'] == m) {//判断待匹配字符在目的串中的位置
                return false;
            }
            add = f[add][s.charAt(i) - 'a'] + 1; 
        }
        return true;
    }
}
