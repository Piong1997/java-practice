//直接合并
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int notNullCount = 0;
        for(ListNode l : lists)
            if(l!=null)
                notNullCount++;
        ListNode newHead = new ListNode(), p=newHead;
        while(notNullCount>0){
            ListNode minNode = new ListNode(Integer.MAX_VALUE);
            int minIndex = -1;
            for(int i=0;i<lists.length;i++){
                if(lists[i]!=null && lists[i].val<minNode.val){
                    minNode = lists[i];
                    minIndex = i;
                }
            }
            lists[minIndex] = lists[minIndex].next;
            if(lists[minIndex]==null) notNullCount--;
            minNode.next = null;
            p.next = minNode;
            p = minNode;
        }
        return newHead.next;  
    }
}
//使用队列
class Solution {
    class Status implements Comparable<Status> {
        int val;
        ListNode ptr;

        Status(int val, ListNode ptr) {
            this.val = val;
            this.ptr = ptr;
        }

        public int compareTo(Status status2) {
            return this.val - status2.val;
        }
    }

    PriorityQueue<Status> queue = new PriorityQueue<Status>();

    public ListNode mergeKLists(ListNode[] lists) {
        for (ListNode node: lists) {
            if (node != null) {
                queue.offer(new Status(node.val, node));
            }
        }
        ListNode head = new ListNode(0);
        ListNode tail = head;
        while (!queue.isEmpty()) {
            Status f = queue.poll();
            tail.next = f.ptr;
            tail = tail.next;
            if (f.ptr.next != null) {
                queue.offer(new Status(f.ptr.next.val, f.ptr.next));
            }
        }
        return head.next;
    }
}
//二分
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        return mergeRangeLists(0,lists.length-1,lists);
        // return mergeTwoLists(lists[0],lists[1]);
    }
    public ListNode mergeRangeLists(int l, int r, ListNode[] lists) {
        if(l>r)
            return null;
        else if(l==r)
            return lists[l];
        else if(l==r-1){
            return mergeTwoLists(lists[l],lists[r]);
        }
        else{
            return mergeTwoLists(mergeRangeLists(l,(l+r)/2,lists),mergeRangeLists((l+r)/2+1,r,lists));
        }
    }
    public ListNode mergeTwoLists(ListNode l1, ListNode l2){
        ListNode head = new ListNode(),p=head;
        for(ListNode p1=l1,p2=l2;p1!=null||p2!=null;){
            if(p1==null){
                p.next = p2;
                break;
            }
            else if(p2==null){
                p.next = p1;
                break;
            }
            else if(p1.val<=p2.val){
                p.next=p1;
                ListNode tmp=p1.next;
                p1.next = null;
                p = p1;
                p1 = tmp;
            }
            else{
                p.next=p2;
                ListNode tmp=p2.next;
                p2.next = null;
                p = p2;
                p2 = tmp;
            }
        }
        return head.next;
    }
}
