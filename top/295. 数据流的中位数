class MedianFinder {

    PriorityQueue<Integer> pq1;
    PriorityQueue<Integer> pq2;
    public MedianFinder() {
        pq1 = new PriorityQueue<>();
        pq2 = new PriorityQueue<>( //大根堆
            new Comparator<Integer>() {
                @Override
                public int compare(Integer o1, Integer o2) {
                    return o2.compareTo(o1);
                }
        });
    }
    
    public void addNum(int num) {
        if(pq2.size()-pq1.size()==1){
            if(num<pq2.peek()){
                pq1.offer(pq2.poll());
                pq2.offer(num);
            }
            else
                pq1.offer(num); 
        }
        else if(pq1.size()!=0&&num>pq1.peek()){
            pq2.offer(pq1.poll());
            pq1.offer(num);
        }
        else
            pq2.offer(num);
    }
    
    public double findMedian() {
        int size = pq1.size()+pq2.size();
        if(size%2==1)
            return pq2.peek();
        else 
            return (pq1.peek()+pq2.peek())/2.0;
    }
}
