#调用系统堆，O(nlgk)，最多有k个元素在堆内，n个元素都需要入堆
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        int[] res = new int[k];
        if(k==0) return res;
        PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>(){
            public int compare(Integer o1, Integer o2){
                return o2-o1;
            }    
        });
        for(int i=0;i<arr.length;i++){
            if(pq.size()<k)
                pq.offer(arr[i]);
            else if(arr[i] < pq.peek()){//这里加上这个条件是为了减少入堆次数，提高效率，可以不要
                pq.offer(arr[i]);
                pq.poll();
            }
        }
        for(int i=0;i<k;i++){
            res[i] = pq.poll();
        }
        return res;
    }
}
#快排思想
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        int[] res = new int[k];
        if(k==0) return res;
        getLeastNumbers_one(arr,0,arr.length-1,k);
        for(int i=0;i<k;i++){
            res[i] = arr[i];
        }
        return res;
    }
    public void getLeastNumbers_one(int[] arr, int p, int q, int k){
        int index = partition(arr,p,q);
        int leftsize = index;
        int rightsize = arr.length-index-1;
        if(index==k-1) return;
        else if(index<k) getLeastNumbers_one(arr,index+1,q,k);
        else getLeastNumbers_one(arr,p,index-1,k);
    }
    public int partition(int[] a, int p, int q){
        int x = new Random().nextInt(q-p+1)+p;
        int i=p, j=q, tmp=a[x];
        a[x] = a[p];
        a[p] = tmp;
        while(i<j){
            while(a[j]>=tmp && i<j)
                j--;
            a[i] = a[j];
            while(a[i]<=tmp && i<j)
                i++;
            a[j] = a[i];
        }
        a[j] = tmp;
        return j;
    }
}
#手写小顶堆
class Solution {
    int[] heap;
    int heapsize;
    public int[] getLeastNumbers(int[] arr, int k) {
        int[] res = new int[k];
        this.heapsize = arr.length;
        this.heap = Arrays.copyOf(arr,arr.length);       
        #自底向上建立整个堆，复杂度O(n)，需要知道所有元素
        for(int i=(heapsize-2)/2;i>=0;i--){
            buildDown(i);
        }
        for(int i=0;i<k;i++){
            res[i] = pop();
        }
        return res;
    }
    public void buildDown(int k){
        if(heapsize==1 || k>(heapsize-2)/2)
            return;
        int left=2*k+1, right=2*k+2, mini=left;
        if(right<heapsize && heap[left]>heap[right])
            mini = right;
        if(heap[k]>heap[mini]){
            swap(k,mini);
            buildDown(mini);
        }
    }
    public int pop(){
        int res = heap[0];
        swap(0,heapsize-1);
        heapsize--;
        buildDown(0);
        return res;
    }

    public void swap(int i, int j){
        int tmp = heap[j];
        heap[j] = heap[i];
        heap[i] = tmp;
    }
}
