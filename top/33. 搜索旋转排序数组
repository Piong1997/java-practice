#递归
class Solution {
    public int search(int[] nums, int target) {
        return binarySearch(nums,target,0,nums.length-1);
    }
    public int binarySearch(int[] nums, int target,int l,int r){
        if(l>r) return -1;
        int mid = (l+r)/2;
        if(target==nums[mid]) return mid;
        if(nums[l]<=nums[mid]){//左升序
            if(target>=nums[l]&&target<=nums[mid])//在左边范围内
             return binarySearch(nums,target,l,mid-1);
            return binarySearch(nums,target,mid+1,r);
        }
        else{//右升序
            if(target>=nums[mid]&&target<=nums[r])//在右边范围内
                return binarySearch(nums,target,mid+1,r);
            return binarySearch(nums,target,l,mid-1);
        }
    }
}
#迭代
class Solution {
    public int search(int[] nums, int target) {
        int len = nums.length;
        int left = 0, right = len-1;
        while(left <= right){
            int mid = (left + right) / 2;
            if(nums[mid] == target)
                return mid;
            else if(nums[mid] < nums[right]){
                if(nums[mid] < target && target <= nums[right])
                    left = mid+1;
                else
                    right = mid-1;
            }
            else{
                if(nums[left] <= target && target < nums[mid])
                    right = mid-1;
                else
                    left = mid+1;
            }
        }
        return -1;
    }
}
