//200 岛屿数量
class Solution {
    int[] dx = {1, 0, 0, -1};
    int[] dy = {0, 1, -1, 0};
    int count = 0;
    public int numIslands(char[][] grid) {
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]=='1') {
                    dfs(grid,i,j);
                    count++;
                }
            }
        }
        return count;
    }
    public void dfs(char[][] grid,int x,int y){
        grid[x][y] = '0';
        for (int i = 0; i < 4; i++) {
                int mx = x + dx[i], my = y + dy[i];
                if (mx >= 0 && mx < grid.length && my >= 0 && my < grid[0].length && grid[mx][my]=='1') {
                    dfs(grid, mx, my);
                }
        }
    }
}
//463 岛屿周长
class Solution {
    int coverCount = 0;
    int[] dx = {1, 0, 0, -1};
    int[] dy = {0, 1, -1, 0};
    public int islandPerimeter(int[][] grid) {
        int x=0,y=0;
        for(int i=0;i<grid.length;i++)
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                        x=i;
                        y=j;
                        break;
                }
            }
        grid[x][y]=-1;
        return dfs(grid,x,y);
    }
    public int dfs(int[][] grid,int x,int y){
        int count = 4, next=0;
        for(int i=0;i<4;i++){
            int mx = x+dx[i];
            int my = y+dy[i];
            if(mx>=0 && mx<grid.length && my>=0 && my<grid[0].length ){
                int tmp = grid[mx][my];
                if(tmp==1 || tmp ==-1) count--;
                if(grid[mx][my]==1){
                    grid[mx][my] = -1;
                    next += dfs(grid,mx,my);
                }
            }
        }
        return count+next;
    }
}
//695. 岛屿的最大面积
class Solution {
    int[] dx = {1, 0, 0, -1};
    int[] dy = {0, 1, -1, 0};
    public int maxAreaOfIsland(int[][] grid) {
        int max = 0;
         for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1) {
                    int tmp = dfs(grid,i,j);
                    max = max>tmp?max:tmp;
                }
            }
        }
        return max;
    }
    public int dfs(int[][] grid,int x, int y){
        grid[x][y] = 0;
        int count = 0;
        for (int i = 0; i < 4; i++) {
                int mx = x + dx[i], my = y + dy[i];
                if (mx >= 0 && mx < grid.length && my >= 0 && my < grid[0].length && grid[mx][my]==1) {
                    count += dfs(grid, mx, my);
                }
        }
        return count+1;
    }
}
