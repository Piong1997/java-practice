class Solution {
    Map<TreeNode,TreeNode> m = new HashMap<>(); //记录每个节点的父节点
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        dfs(root);
        int depth_1=0,depth_2=0;
        TreeNode p_1=p,q_1=q;
        List<TreeNode> visited = new ArrayList<>();
        while(p_1!=root){
            visited.add(p_1);
            p_1=m.get(p_1);
        }
        while(q_1!=root){
            if(visited.contains(q_1))
                return q_1;
            q_1=m.get(q_1);
        }
        return q_1;
    }
    public void dfs(TreeNode p){
        if(p.left!=null){
            m.put(p.left,p);
            dfs(p.left);
        }
        if(p.right!=null){
            m.put(p.right,p);
            dfs(p.right);
        }
    }
}
#递归 https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/solution/236-er-cha-shu-de-zui-jin-gong-gong-zu-xian-hou-xu/
class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root==null || root==p || root==q) //到了叶子结点，或者找到了p或q，直接返回root
            return root;
        TreeNode left = lowestCommonAncestor(root.left,p,q);
        TreeNode right = lowestCommonAncestor(root.right,p,q);
        if(left==null && right==null) //左右都没找到pq，返回null
            return null;
        if(left==null)//右边找到p或q，返回right
            return right;
        if(right==null)//左边找到p或q，返回left
            return left;
        return root; //左右分别都找到了p或q，root就是公共祖先   
    } 
}
