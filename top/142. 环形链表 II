//推导https://leetcode-cn.com/problems/linked-list-cycle-ii/solution/huan-xing-lian-biao-ii-by-leetcode-solution/
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head,fast = head,tmp=head;
        while(fast!=null){//第一步，找到快慢指针交汇点
            slow = slow.next;
            if(fast.next!=null) 
                fast = fast.next.next;
            else 
                return null;
            if(slow == fast)
                break;
        }
        if(fast == null) return null;//判断是否无环
        while(tmp!=slow){//第二步，首指针和慢指针一起走，相遇点就是环起点
            slow = slow.next;
            tmp = tmp.next;
        }
        return tmp;
    }
}
//求环的长度：找到环开头节点后再遍历环一次
or 哈希表
public class Solution {
    Map<ListNode,Integer> m = new HashMap<>();
    public ListNode detectCycle(ListNode head) {
        ListNode p = head;
        int i = 0;
        while(p!=null){
            m.put(p,i);
            if(m.containsKey(p.next))
                return p.next;
            i++;
            p=p.next;
        }
        return null;
    }
}
