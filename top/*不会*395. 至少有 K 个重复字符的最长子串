
#递归
class Solution {
    public int longestSubstring(String s, int k) {
        if(s.length()<k) //如果子串长度已经小于k，返回0
            return 0;
        HashMap<Character,Integer> map = new HashMap<>();
        for(int i=0;i<s.length();i++){
            map.put(s.charAt(i),map.getOrDefault(s.charAt(i),0)+1);
        }
        int res = 0;
        for(char c : map.keySet()){
            if(map.get(c)<k){//如果某个字符数量小于k，那么就不能包含它，按其进行分割
                for(String tmp : s.split(c+"")){
                    res = Math.max(res,longestSubstring(tmp,k));//对每个子串，递归地进行分割
                }
                return res;//返回分割后的最大值
            }
        }
        return s.length();//如果每个字符都大于k个了，说明当前子串符合条件，直接返回长度
    }
}



//错了 主要看遍历map的方法（顺序和逆序）
class Solution {
    public int longestSubstring(String s, int k) {
        Map<Character,Integer> m = new LinkedHashMap<>();
        int len = s.length();
        int res  = 0;
        if(k==1) return len;
        for(int i=0;i<len;i++){
            char c = s.charAt(i);
            if(m.containsKey(c)){
                int count = m.get(c)-1;
                m.remove(c);
                m.put(c,count);
                Set<Map.Entry<Character,Integer>> set = m.entrySet();
                Iterator<Map.Entry<Character,Integer>> li =set.iterator();
                int length = 0;
                // ListIterator<Map.Entry<Character,Integer>> li=new ArrayList<Map.Entry<Character,Integer>>(m.entrySet()).listIterator(m.size()); //逆序遍历Linkedmap只能采用List
                while(li.hasNext()){
                    Map.Entry<Character,Integer> me = li.next();
                    if(me.getValue()<=0)
                        length+=k-me.getValue();
                    else
                        break;
                }
                res = Math.max(res,length);
            }
            else
                m.put(c,k-1);
        }
        return res;
    }
}

