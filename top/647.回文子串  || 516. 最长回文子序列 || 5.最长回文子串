#647
//从中心拓展，边拓展边记录最长长度 O(n^2)
//如果从前往后找子序列，需 O(n^2)，判断回文要 O(n)，共 O(n^3)
5. 最长回文子串
class Solution {
    int max = 0;
    StringBuilder sb = new StringBuilder();
    public String longestPalindrome(String s) {
        for (int i=0; i < s.length(); i++){
            count(s, i, i);//回文串长度为奇数
            count(s, i, i+1);//回文串长度为偶数
        }
        return sb.toString();
    }
    
    public void count(String s, int start, int end){
        int len = 0;
        while(start >= 0 && end < s.length() && s.charAt(start) == s.charAt(end)){
            len+= start==end?1:2;
            if(len>max){
                max = len;
                sb.delete(0,sb.length());
                sb.append(s.substring(start,end+1));
            }
            start--;
            end++;
        }
    }
}
class Solution {
    public String longestPalindrome(String s) {
        int start=0,end=0;
        boolean[][] dp = new boolean[s.length()][s.length()];
        for(int i=0; i<s.length(); i++)
            for(int j=0; j<=i; j++)
                dp[i][j] = true;
        for(int i=s.length()-2; i>=0 ; i--){
            for(int j=i+1; j<s.length(); j++){
                if(s.charAt(i)==s.charAt(j)){
                    dp[i][j] = dp[i+1][j-1];
                    if(dp[i][j]==true && end-start+1<j-i+1 ){
                        start = i;
                        end = j;
                    }
                }
                else
                    dp[i][j] = false;
            }
        }
        return s.substring(start,end+1);
    }
}
#516
//1. 反转然后用最长公共子序列
class Solution {
    public int longestPalindromeSubseq(String s) {
        String t = new StringBuilder(s).reverse().toString();
        return longestCommonSubsequence(s,t);
    }
     public int longestCommonSubsequence(String text1, String text2) {
        int m = text1.length(), n = text2.length();
        int[][] arr = new int[m+1][n+1];
        for(int i=1;i<m+1;i++){
            char c1 = text1.charAt(i - 1); //避免从内层循环取值
            for(int j=1;j<n+1;j++){
                if(c1==text2.charAt(j-1)){
                    arr[i][j] = arr[i-1][j-1]+1;
                }else{
                    arr[i][j] = Math.max(arr[i-1][j],arr[i][j-1]);
                }
            }
        }
        return arr[m][n];
    }
}
//2.动态规划，注意从底向上一行一行地填！！！ 如果是i,j=i-1,j-1的形式，则是从上往下一行一行填
class Solution {
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = n - 1; i >= 0; i--) {
            dp[i][i] = 1;
            char c1 = s.charAt(i);
            for (int j = i + 1; j < n; j++) {
                char c2 = s.charAt(j);
                if (c1 == c2) {
                    dp[i][j] = dp[i + 1][j - 1] + 2;
                } else {
                    dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[0][n - 1];
    }
}
