#使用数组存储
class Solution {
    public boolean isPalindrome(ListNode head) {
        ArrayList<Integer> arr = new ArrayList<>();
        for(ListNode p=head;p!=null;p=p.next){
            arr.add(p.val);
        }
        for(int i=0;i<=arr.size()/2;i++){
            if(arr.get(i)==arr.get(arr.size()-1-i))
                continue;
            return false;
        }
        return true;
    }
}
#使用快慢指针找中点，并且快指针没走到时慢指针边走边反转
class Solution {
 public static boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null) {
            return true;
        }
        ListNode slow = head, fast = head;
        ListNode pre = null;
        while(fast != null && fast.next != null) { //奇数出现fast.next=null，偶数出现fast=null
            fast = fast.next.next;
            ListNode temp = slow.next;
            slow.next = pre;
            pre = slow;
            slow = temp;
        }
        if(fast != null) { //走到后半部分头结点
            slow = slow.next;
        }
        while(pre != null && slow != null) {
            if(pre.val != slow.val) {
                return false;
            }
            pre = pre.next;
            slow = slow.next;
        }
        return true;
    }
}
