#稳定的算法：冒泡、直接插入、归并
#直接插入排序
public int[] sortArray(int[] nums) {
        for(int i=1;i<nums.length;i++){
            int tmp=nums[i];
            int j=i-1;
            for(;j>=0&&nums[j]>tmp;j--){//把前面的数与当前数比较，比当前数大就往后移一位
                nums[j+1] = nums[j];//往后移一位
            }
            nums[j+1] = tmp;//j+1就是当前数应该在的位置
        }
        return nums;
}
#选择排序
public int[] sortArray(int[] nums) {
for(int i=0;i<nums.length-1;i++){
    int min = i;
    for(int j=i+1;j<nums.length;j++){ //对每个位置后面的元素，找到最小值
        min = nums[j]<nums[min]?j:min;
    }
    int tmp = nums[i];//最小值和i交换
    nums[i] = nums[min];
    nums[min] = tmp;
}
return nums;
}
#冒泡
public int[] sortArray(int[] nums) {
        for(int i=0;i<nums.length-1;i++){
            for(int j=0;j<nums.length-i-1;j++){
                if(nums[j]>nums[j+1]){
                    int tmp=nums[j];
                    nums[j]=nums[j+1];
                    nums[j+1]=tmp;
                }
            }
        }
        return nums;
    }
    
#2路归并排序
 public int[] sortArray(int[] nums) {
        return sort(nums,0,nums.length-1);
    }
    public int[] sort(int[] a,int low,int high){
        int mid = low+(high-low)/2;
        if(low<high){
            sort(a,low,mid);
            sort(a,mid+1,high);
            merge(a,low,mid,high);
        }
        return a;
    }
    public void merge(int[] a,int low, int mid, int high){
        int i=low,j=mid+1,index=0;
        int[] tmp = new int[high-low+1];
        // 把较小的数先移到新数组中
        while(i<=mid && j<=high){
            if(a[i]<=a[j])   //这里用<=保证相等情况下先用前面的，保证了排序的稳定性
                tmp[index++]=a[i++];
            else
                tmp[index++]=a[j++];
        }
        // 把左边剩余的数移入数组 
        while(i<=mid){
            tmp[index++] = a[i++];
        }
        // 把右边边剩余的数移入数组
        while(j<=high){
            tmp[index++] = a[j++];
        }
        // 把新数组中的数覆盖nums数组
         for(int x=0;x<tmp.length;x++){
            a[x+low] = tmp[x];
        }
    }
#链表排序，递归归并，空间复杂度O(lgn)
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null)
            return head;
        ListNode fast=head.next,slow=head; //保证slow在双数时指向两个中间的前一个（这样只有两个节点时不会出错），在单数时指向中间节点
        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }
        ListNode nextStart = slow.next;//记录第二个链表的起始节点，然后断开两个链表
        slow.next = null;
        ListNode left = sortList(head);
        ListNode right = sortList(nextStart);
        ListNode newHead = new ListNode(); //建立头并记录
        ListNode res = newHead;      
        while(left!=null && right!=null){
            if(left.val<right.val){
                newHead.next = left;
                left = left.next;
            }
            else{
                newHead.next = right;
                right = right.next;
            }
            newHead = newHead.next;
        }
        newHead.next = left==null?right:left; //将剩余的连接到res链表上
        return res.next;
    }
}
#链表快排
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null||head.next==null) return head;
        ListNode newHead=new ListNode(-1);
        newHead.next=head;
        return quickSort(newHead,null);
    }
    // 带头结点的链表快速排序
    private ListNode quickSort(ListNode head,ListNode end){
        if(head.next==end) //带头节点，head.next==end相当于只有一个end节点
            return head;
        ListNode tmpHead = new ListNode(-1);//新链表表头，存小于partition的所有节点
        //划分元设置为第一个元素，tmpHead_p和p分别为新链表和原链表的指针
        ListNode partition = head.next, tmpHead_p=tmpHead, p=partition;
        //p初始是partition,需要判断p.next，方便去掉p.next
        while(p.next!=end){
            if(p.next.val<partition.val){
                tmpHead_p.next = p.next;
                tmpHead_p = tmpHead_p.next;//节点加入到新链表中
                p.next = p.next.next;//从原链表上断开,p不变，因为我们判断的是p.next
            }
            else
                p = p.next;//大于partition，p前进
        }
        tmpHead_p.next = head.next;//新链表尾连接到原链表的数据头节点
        head.next = tmpHead.next;//原链表的dummy节点连接到新联表的数据头结点
        quickSort(head,partition);
        quickSort(partition,end);
        return head.next;
    }
}
