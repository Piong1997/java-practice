class Solution {
    int i = 0;
    String ss = "";
    int maxLen = 0;
    List<String> res = new ArrayList();
    public List<String> removeInvalidParentheses(String s) {
        this.ss = s;
        parse("",s.charAt(0));
        HashSet<String> hashSet = new HashSet<>(res);
        res = new ArrayList<>(hashSet);
        if(res.size()==0) res.add("");
        return res;
    }
    public void parse(String s,char c){
        int left = 0,right = 0,lenss = ss.length();
        for(int ti=0;ti<s.length();ti++){
            if(s.charAt(ti)=='(') left++;
            else if(s.charAt(ti)==')') right++;
        }
        if(right>left) {
            i++;
            return;
        }
        else if(left-right>lenss-i+1){
            i++;
            return; 
        }
        StringBuilder tmp = new StringBuilder(s);
        tmp.append(c);
        String stmp = tmp.toString();
        int stlen = stmp.length();
        if(isValid(stmp)) {
            if(stlen>maxLen){
                maxLen = stlen;
                res.clear();
                res.add(stmp);
            }
            else if(stlen==maxLen)
                res.add(stmp);
        }
        i++;
        if(i>=lenss) return;
        parse(stmp,ss.charAt(i));
        i--;
        if(i>=lenss) return;
        parse(s,ss.charAt(i));
        i--;
    }
    public boolean isValid(String s) {
        Map<Character,Character> m = new HashMap<>();
        m.put(')','(');
        m.put(']','[');
        m.put('}','{');
        Stack<Character> stack = new Stack<>();
        for(int i=0;i<s.length();i++){
            Character c = s.charAt(i);
            if(c-'a'>=0&&c-'a'<=25) continue;
            if(m.containsKey(c)){
                if(stack.isEmpty()||stack.pop()!=m.get(s.charAt(i)))
                    return false;
            }
            else
                stack.push(c);
        }
        return stack.isEmpty();
    }
}
