class Solution {
    List<Integer> res;
    public List<Integer> spiralOrder(int[][] matrix) {
        res = new ArrayList<>();
        int len1 = matrix.length,len2=matrix[0].length;
        int count = Math.min(len1,len2)%2==0?Math.min(len1,len2)/2:Math.min(len1,len2)/2+1;
        for(int i=0;count>0;count--,i++)
            dfs(matrix,i,i);
        return res;
    }
    public void dfs(int[][] matrix, int p, int q){
        if(matrix.length-2*p==1){ //只剩一行，特殊处理
            for(int j=q;j<matrix[0].length-q;j++)
                res.add(matrix[p][j]);
            return;
        }
        else if(matrix[0].length-2*q==1){//只剩一列，特殊处理
            for(int i=p;i<matrix.length-p;i++) 
                res.add(matrix[i][q]);
            return;
        }
        for(int j=q;j<matrix[0].length-q;j++)//先往右走
            res.add(matrix[p][j]);
        for(int i=p+1; i<matrix.length-p; i++)//往下走，i从p+1开始，防止转角处元素重复访问
            res.add(matrix[i][matrix[0].length-p-1]);
        for(int j=matrix[0].length-q-2;j>=q;j--)//往左走，j从matrix[0].length-q-2开始，防止转角元素重复
            res.add(matrix[matrix.length-p-1][j]);
        for(int i=matrix.length-p-2;i>p;i--)//往上走，i从matrix.length-p-2开始，防止转角元素重复
            res.add(matrix[i][q]);
    }
}
