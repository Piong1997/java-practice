class Solution {
    public List<Integer> addToArrayForm(int[] num, int k) {
        List<Integer> res = new ArrayList<Integer>();
        int n = num.length;
        for (int i = n - 1; i >= 0; --i) {
            int sum = k%10+num[i];
            k = k/10;
            if(sum>=10){
                k++; //k代替进位
                sum-=10;
            }
            res.add(sum);
        }
        for(;k>0;k=k/10){ //k还有全加上
            res.add(k%10);
        }
        Collections.reverse(res);
        return res;
    }
}
while ( A 没完 || B 没完)
    A 的当前位
    B 的当前位

    和 = A 的当前位 + B 的当前位 + 进位carry

    当前位 = 和 % 10;
    进位 = 和 / 10;

判断还有进位吗

//递归获取数字每一位
void method(int n)
{
	if (n>9)
	{
		method(n / 10);

	}
	printf("%d", n % 10);
	
}
int main()
{
	method(123567890);
	system("pause");
	return 0;
}
//415
class Solution {
    public String addStrings(String num1, String num2) {
        int carray = 0;
        StringBuilder sb = new StringBuilder();
        for(int i=num1.length()-1,j=num2.length()-1;i>=0||j>=0||carray>0;i--,j--){
            int n1 = i>=0?num1.charAt(i) - '0':0;//直接减 不用parseInt
            int n2 = j>=0?num2.charAt(j) - '0':0;
            int sum = n1+n2+carray;
            carray = sum/10;
            sb.append(sum%10); //不用转String
        }
        return sb.reverse().toString();
    }
}
