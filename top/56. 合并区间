class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> res = new ArrayList<>();
        Arrays.sort(intervals, new Comparator<int[]>() {
            public int compare(int[] interval1, int[] interval2) {
                return interval1[0] - interval2[0];
            }
        });
        for(int i=0;i<intervals.length;i++){
            int  next=intervals[i][0],next_2=intervals[i][1];
            if(i==0 || res.get(res.size()-1)[1]<next)
                res.add(new int[]{next,next_2});
            else
                res.get(res.size()-1)[1] = Math.max(res.get(res.size()-1)[1],next_2);
        }
        return res.toArray(new int[0][]);
    }
}
class Solution {
    public int[][] merge(int[][] intervals) {
        List<int[]> list = new ArrayList<>();
        for(int i=0;i<intervals.length;i++){
            // List<Integer> list1 = Arrays.stream(intervals[i]).boxed().collect(Collectors.toList());
            list.add(intervals[i]);
        }
        list.sort(
                new Comparator<int[]>() {
                    @Override
                    public int compare(int[] o1, int[] o2) {
                        return o1[0] -o2[0];
                    }
                }
        );
        for(int i=0;i<list.size()-1;){
            int pre = list.get(i)[1], next=list.get(i+1)[0];
            if(pre>=next){
                list.get(i)[1]= Math.max(list.get(i+1)[1],list.get(i)[1]);
                list.remove(i+1);
            }
            else
                i++;
        }
        return list.toArray(new int[0][]); //List<int[]>è½¬int[][]
    }
}
