//mysolution：遍历每一个节点递归找其左子树和右子树的最大路径
class Solution {
   public int maxPathSum(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        dfsMaxPathSum(root,res);
        return Collections.max(res);
    }
    //找该节点的最大路径
    public  int maxRoot(TreeNode root,TreeNode trueRoot){
        if(root==null)
            return 0;
        int left=maxRoot(root.left,trueRoot);
        int right = maxRoot(root.right,trueRoot);
        left=left>0?left:0;
        right=right>0?right:0;
        if(root==trueRoot)
            return left+right+root.val;
        return Math.max(left,right)+root.val;
    }
    //节点遍历
    public void dfsMaxPathSum(TreeNode root,List<Integer> res){
        if (root == null) return;
        res.add(maxRoot(root,root));
        dfsMaxPathSum(root.left,res);
        dfsMaxPathSum(root.right,res);
    }
}
class Solution {
    int res = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        maxRoot(root);
        return res;
    }
    public  int maxRoot(TreeNode root){
        if(root==null)
            return 0;
        int left=maxRoot(root.left);
        int right = maxRoot(root.right);
        // 更新最大值，就是当前节点的val 加上左右节点的贡献。
        res = Math.max(res, root.val + left + right);
        // 计算当前节点能为父亲提供的最大贡献
        int max = Math.max(root.val + left, root.val + right);
        // 如果贡献小于0的话，直接返回0即可！
        return max < 0 ? 0 : max;
    } 
}
//543. 二叉树的直径
class Solution {
    int maxlen = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        maxLength(root);
        return maxlen-1;
    }
    public int maxLength(TreeNode root){
        int len=0;
        if(root==null)
            return 0;
        int leftlen = maxLength(root.left);
        int rightlen = maxLength(root.right);
        len = leftlen+rightlen+1;
        maxlen = maxlen>len?maxlen:len;
        return Math.max(leftlen,rightlen)+1;
    }
}
//687. 最长同值路径
//双重递归
class Solution {
    int res = 0;
    public int longestUnivaluePath(TreeNode root) {
        if(root==null) return 0;
        int countleft = countLength(root.left,root.val);
        int countright = countLength(root.right,root.val);
        int count = countleft+countright;
        res = res>count?res:count;
        longestUnivaluePath(root.left);
        longestUnivaluePath(root.right);
        return res;
    }
    public int countLength(TreeNode root,int target){
        if(root==null) return 0;
        if(root.val==target){
            return 1+Math.max(countLength(root.left,target),countLength(root.right,target));
        }else return 0;
    }
}
class Solution {
    int ans;
    public int longestUnivaluePath(TreeNode root) {
        ans = 0;
        arrowLength(root);
        return ans;
    }
    public int arrowLength(TreeNode node) {
        if (node == null) return 0;
        int left = arrowLength(node.left);
        int right = arrowLength(node.right);
        int arrowLeft = 0, arrowRight = 0;
        if (node.left != null && node.left.val == node.val) {//判断子节点的贡献值能否被本节点利用，如果子节点和本节点值不同，则只能为0
            arrowLeft += left + 1;
        }
        if (node.right != null && node.right.val == node.val) {
            arrowRight += right + 1;
        }
        ans = Math.max(ans, arrowLeft + arrowRight);//算本节点最大长度
        return Math.max(arrowLeft, arrowRight); //返回贡献值
    }
}
