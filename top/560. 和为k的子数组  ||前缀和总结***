//那么「[j..i][j..i] 这个子数组和为 kk 」这个条件我们可以转化为 pre[i]−pre[j−1]==k ，移项，pre[j−1]==pre[i]−k
//所以我们考虑以 i 结尾的和为 k 的连续子数组个数时只要统计有多少个前缀和为 pre[i]−k 的pre[j] 即可。
//560
class Solution {
    public int subarraySum(int[] nums, int k) {
        Map<Integer,Integer> pre = new HashMap();
        pre.put(0,1);
        int pre_i = 0;
        int count = 0;
        for(int i=0;i<nums.length;i++){
            pre_i = pre_i+nums[i];
            if(pre.containsKey(pre_i-k)){
                count += pre.get(pre_i-k);
            }
            pre.put(pre_i, pre.getOrDefault(pre_i, 0) + 1);
            
        }
        return count;
    }
}
//930
//1248
//a[i]=k代表0~i有k个奇数，有：a[i]-a[j]=k, a[i]-k = a[j], 所以map里面应该存不同a[j]对应的个数
class Solution {
    public int numberOfSubarrays(int[] nums, int k) {
        int res = 0, pre = 0;//pre为前缀和，代表0~i奇数个数
        HashMap<Integer,Integer> map = new HashMap<>();//map里面存的是pre为x的个数，也就是0~i奇数个数 为x的有几个
        map.put(0,1);
        for(int i=0;i<nums.length;i++){
            if((nums[i]&1)==1){
                pre+=1;
            }
            if(map.containsKey(pre-k)){
                res+=map.get(pre-k);
            }
            map.put(pre,map.getOrDefault(pre,0)+1);
        }
        return res;
    }
}
//974
//{a[i]-a[j]}%k=0  ->   a[i]%k=a[j]%k
class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int res = 0, pre = 0;
        HashMap<Integer,Integer> map = new HashMap<>();//map里面存a[j]%k==x 的个数
        map.put(0,1);
        for(int i=0;i<nums.length;i++){
            pre += nums[i];
            int ret = (pre%k+k)%k;   //ret本来应该为pre%k，但是pre可能为负数，要特殊处理
            if(map.containsKey(ret)){
                res += map.get(ret);
            }
            map.put(ret,map.getOrDefault(ret,0)+1);
        }
        return res;
    }
}
//523
